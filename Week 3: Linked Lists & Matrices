234. Palindrome Linked List

class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        nums = []
        while head:
            nums.append(head.val)
            head = head.next
        l, r = 0, len(nums) - 1
        while l <= r:
            if nums[l] != nums[r]:
                return False
            l += 1
            r -= 1
        return True

143. Reorder List

class Solution:
    def reorderList(self, head):
        fast = head
        slow = head

        # find the midpoint of the linked list
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next

        # splitting them into two lists
        second = slow.next
        slow.next = None
        node = None

        # reversing the second linked list
        while second:
            temp = second.next
            second.next = node
            node = second
            second = temp

        first = head
        second = node

        # adding the lists together
        while second:
            temp1, temp2 = first.next, second.next
            first.next, second.next = second, temp1
            first, second = temp1, temp2
